# A target, on which implementations of various pluggable strategies depend.
# Contains minimal amount of code needed to implement those strategies.
cpp_library(
    name = 'reactivesocket-plugins',

    headers = [
        'src/DuplexConnection.h',
        'src/Payload.h',
        'src/framed/FramedReader.h',
        'src/framed/FramedWriter.h',
        'src/framed/FramedDuplexConnection.h',
    ],
    srcs = [
        'src/framed/FramedReader.cpp',
        'src/framed/FramedWriter.cpp',
        'src/framed/FramedDuplexConnection.cpp',
    ],
    deps = [
        ':reactivesocket-streams',
        ':reactivesocket-internal',
        '@/folly:exception_wrapper',
        '@/folly/io:iobuf',
    ],
)

# Actual implementation of the ReactiveSocket library.
cxx_library(
    name = 'reactivesocket-internal',

    header_namespace = "src",
    exported_headers = subdir_glob([
        ('src', '**/*.h'),
    ]),
    srcs = [
        'src/AbstractStreamAutomaton.cpp',
        'src/automata/ChannelRequester.cpp',
        'src/automata/ChannelResponder.cpp',
        'src/automata/StreamRequester.cpp',
        'src/automata/StreamResponder.cpp',
        'src/automata/SubscriptionRequester.cpp',
        'src/automata/SubscriptionResponder.cpp',
        'src/ConnectionAutomaton.cpp',
        'src/Frame.cpp',
        'src/NullRequestHandler.cpp',
        'src/ReactiveSocket.cpp',
        'src/Stats.cpp',
    ],
    deps = [
        ':reactivesocket-streams',
        '//folly:exception_wrapper',
        '//folly/futures:futures',
        '//folly/io:iobuf',
        '//lithium/reactive-streams-cpp:reactive-streams-utilities',
    ],
)

cpp_library(
    name = 'reactivesocket',

    headers = [
        'src/NullRequestHandler.h',
        'src/Payload.h',
        'src/RequestHandler.h',
        'src/ReactiveSocket.h',
        'src/Stats.h',
        'src/mixins/IntrusiveDeleter.h', #TODO(lehecka): remove from public api
        'src/mixins/MemoryMixin.h', #TODO(lehecka): remove from public api
    ],
    deps = [
        ':reactivesocket-internal',
    ],
)

cxx_library(
    name = 'reactivesocket-tcp-internal',

    header_namespace = "src",
    headers = subdir_glob([
        ('src/tcp', '**/*.h'),
    ]),
    srcs = [
        'src/tcp/TcpDuplexConnection.cpp',
    ],
    deps = [
        ':reactivesocket-internal',
        '//folly/io/async:async',
    ],
)

cpp_library(
    name = 'reactivesocket-tcp',

    headers = [
        'src/tcp/TcpDuplexConnection.h',
    ],
    deps = [
        ':reactivesocket-tcp-internal',
    ],
)

cxx_test(
    name = 'reactivesocket-tests',

    header_namespace = 'test',
    headers = subdir_glob([
        ('test', '**/*.h'),
    ]),
    srcs = glob(['test/*.cpp']),
    deps = [
        ':reactivesocket-internal',
        ':reactivesocket-streams-mocks',
    ],
)

# Compatibility target for ReactiveStreams API.
cpp_library(
    name = 'reactivesocket-streams',

    headers = ['src/ReactiveStreamsCompat.h',],
    deps = ['@/lithium/reactive-streams-cpp:reactive-streams',],
)

# Compatibility target for ReactiveStreams mocking helpers.
cpp_library(
    name = 'reactivesocket-streams-mocks',

    headers = ['test/ReactiveStreamsMocksCompat.h', 'test/streams/Mocks.h'],
    deps = ['@/lithium/reactive-streams-cpp:reactive-streams-mocks',],
)
