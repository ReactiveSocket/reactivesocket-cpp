# A target, on which implementations of various pluggable strategies depend.
# Contains minimal amount of code needed to implement those strategies.
cpp_library(
    name = 'plugins',
    headers = [
        'src/DuplexConnection.h',
        'src/Payload.h',
    ],
    deps = [
        ':streams',
        '@/folly:exception_wrapper',
        '@/folly/io:iobuf',
    ],
    preprocessor_flags = ['-Ilithium',],
)

# Actual implementation of the ReactiveSocket library.
cpp_library(
    name = 'library',
    headers = [
        'src/automata/ChannelRequester.h',
        'src/automata/ChannelResponder.h',
        'src/automata/SubscriptionRequester.h',
        'src/automata/SubscriptionResponder.h',
        'src/mixins/ConsumerMixin-inl.h',
        'src/mixins/ConsumerMixin.h',
        'src/mixins/ExecutorMixin.h',
        'src/mixins/IntrusiveDeleter.h',
        'src/mixins/MemoryMixin.h',
        'src/mixins/MixinTerminator.h',
        'src/mixins/LoggingMixin.h',
        'src/mixins/PublisherMixin.h',
        'src/mixins/StreamIfMixin.h',
        'src/mixins/SinkIfMixin.h',
        'src/mixins/SourceIfMixin.h',
        'src/AbstractStreamAutomaton.h',
        'src/ConnectionAutomaton.h',
        'src/Frame.h',
        'src/ReactiveSocket.h',
        'src/RequestHandler.h',
    ],
    srcs = [
        'src/automata/ChannelRequester.cpp',
        'src/automata/ChannelResponder.cpp',
        'src/automata/SubscriptionRequester.cpp',
        'src/automata/SubscriptionResponder.cpp',
        'src/AbstractStreamAutomaton.cpp',
        'src/ConnectionAutomaton.cpp',
        'src/Frame.cpp',
        'src/ReactiveSocket.cpp',
    ],
    deps = [
        ':plugins',
        ':streams',
        '@/folly/futures:futures',
        '@/folly/io:iobuf',
        '@/folly:singleton',
        '@/lithium/reactive-streams-cpp:utilities',
    ],
    preprocessor_flags = ['-Ilithium',],
)

# Bundles all tests and test helpers.
cpp_unittest(
    name = 'frame_tests',
    headers = glob(['test/*.h']),
    srcs = glob(['test/FrameTest.cpp']),
    deps = [
        ':library',
        ':plugins',
        ':streams-mocks',
        '@/folly/futures:futures',
    ],
    preprocessor_flags = ['-Ilithium',],
)

cpp_unittest(
    name = 'tests',
    headers = glob(['test/*.h']),
    srcs = glob(['test/*.cpp'], excludes=['test/FrameTest.cpp']),
    deps = [
        ':library',
        ':plugins',
        ':streams-mocks',
        '@/folly/futures:futures',
    ],
    preprocessor_flags = ['-Ilithium',],
)

# Compatibility target for ReactiveStreams API.
cpp_library(
    name = 'streams',
    headers = ['src/ReactiveStreamsCompat.h',],
    deps = ['@/lithium/reactive-streams-cpp:api',],
    preprocessor_flags = ['-Ilithium',],
)

# Compatibility target for ReactiveStreams mocking helpers.
cpp_library(
    name = 'streams-mocks',
    headers = ['test/ReactiveStreamsMocksCompat.h',],
    deps = ['@/lithium/reactive-streams-cpp:mocks',],
    preprocessor_flags = ['-Ilithium',],
)
